package app.DAO;import app.DBConfig.Const;import app.DBConfig.DataBaseHandler;import app.entities.InhabitantType;import app.entities.Region;import app.entities.Weather;import java.sql.*;import java.util.ArrayList;public class DAOClass implements Data{    private Connection connection;    private Statement statement;    public DAOClass() throws SQLException, ClassNotFoundException {    }    private ArrayList<Region> getRegionsByNameFromDB(String tmpName) throws SQLException {        ArrayList<Region> regions = new ArrayList<>();        int Id = 0;        String name="";        double area=0;        Weather weather=null;        InhabitantType inhabitantType=null;        int w =0;        int i=0;        String getString = "select * from " + Const.REGION_TABLE + " where " + Const.NAME + " like (" +"'"+tmpName+"')";        ResultSet resultSet = statement.executeQuery(getString);        while (resultSet.next()){            Region region = new Region();            Id = resultSet.getInt(1);            name = resultSet.getString(2);            area = resultSet.getDouble(3);            w= resultSet.getInt(4);            i= resultSet.getInt(5);            region.setId(Id);            region.setName(name);            region.setArea(area);            region.setWeatherId(w);            region.setInhabitantTypeId(i);            regions.add(region);        }        for (Region r: regions) {            r.setWeather(getWeatherById(r.getWeatherId()));            r.setInhabitantType(getInhabitantTypeById(r.getInhabitantTypeId()));        }        return regions;    }    private Weather getLastWeather() throws SQLException {        Weather weather = new Weather();        int Id = 0;        Date date = null;        int temperature =0;        int precipitation = 0;        String getString = "select * from " + Const.DATABASENAME+"."+Const.WEATHER_TABLE + " order by " + Const.WEATHER_ID + " desc limit 1";        ResultSet resultSet = statement.executeQuery(getString);        while (resultSet.next()){            Id = resultSet.getInt(1);            date = resultSet.getDate(2);            temperature = resultSet.getInt(3);            precipitation = resultSet.getInt(4);        }        weather.setId(Id);        weather.setDate(date);        weather.setTemperature(temperature);        weather.setPrecipitation(precipitation);        return weather;    }    private InhabitantType getLastInhabitantType() throws SQLException {        InhabitantType inhabitantType = new InhabitantType();        int Id = 0;        String name = "";        String language = "";        String getString = "select * from " + Const.DATABASENAME + "." + Const.INHABITANT_TYPE_TABLE + " order by " + Const.ID_TYPE + " desc limit 1";        ResultSet resultSet = statement.executeQuery(getString);        while (resultSet.next()) {            Id = resultSet.getInt(1);            name = resultSet.getString(2);            language = resultSet.getString(3);        }        inhabitantType.setId(Id);        inhabitantType.setName(name);        inhabitantType.setLanguage(language);        return inhabitantType;    }    private InhabitantType getInhabitantTypeByIdFromDb(int id) throws SQLException {        InhabitantType inhabitantType = new InhabitantType();        int Id=0;        String name = "";        String language= "";        String getString = "select * from "+Const.INHABITANT_TYPE_TABLE + " where "+Const.ID_TYPE +" = " +id;        ResultSet resultSet = statement.executeQuery(getString);        while(resultSet.next()){            Id = resultSet.getInt(1);            name = resultSet.getString(2);            language = resultSet.getString(3);        }        inhabitantType.setId(Id);        inhabitantType.setName(name);        inhabitantType.setLanguage(language);        return inhabitantType;    }    private Region getRegionByIdFromDb(int id) throws SQLException{        Region region = new Region();        int Id = 0;        String name="";        double area=0;        Weather weather=null;        InhabitantType inhabitantType=null;        int w =0;        int i=0;        String getString = "select * from " + Const.REGION_TABLE + " where " + Const.REGION_ID + " = " +id;        ResultSet resultSet = statement.executeQuery(getString);        while (resultSet.next()){            Id = resultSet.getInt(1);            name = resultSet.getString(2);            area = resultSet.getDouble(3);            w= resultSet.getInt(4);            i= resultSet.getInt(5);        }        System.out.println(w);        weather = getWeatherById(w);        inhabitantType = getInhabitantTypeById(i);        region.setId(Id);        region.setName(name);        region.setArea(area);        region.setWeather(weather);        region.setInhabitantType(inhabitantType);        return region;    }    private Weather getWeatherByIdFromDb(int id) throws SQLException{        Weather weather = new Weather();        int Id = 0;        Date date = null;        int temperature =0;        int precipitation = 0;        String getString = "select * from " + Const.DATABASENAME+"."+Const.WEATHER_TABLE + " where " + Const.WEATHER_ID + " = " +id;        ResultSet resultSet = statement.executeQuery(getString);        while (resultSet.next()){            Id = resultSet.getInt(1);            date = resultSet.getDate(2);            temperature = resultSet.getInt(3);            precipitation = resultSet.getInt(4);        }        weather.setId(Id);        weather.setDate(date);        weather.setTemperature(temperature);        weather.setPrecipitation(precipitation);        return weather;    }    private void addWeatherToDb(Weather weather) throws SQLException {        String addString = "insert into "+ Const.WEATHER_TABLE + "("+Const.DATE + ","+Const.TEMPERATURE + "," + Const.PRECIPITATION +") values(?,?,?)";        PreparedStatement preparedStatement = connection.prepareStatement(addString);        preparedStatement.setDate(1,weather.getDate());        preparedStatement.setDouble(2,weather.getTemperature());        preparedStatement.setInt(3,weather.getPrecipitation());        preparedStatement.executeUpdate();        try{            statement.execute(addString);        }catch (Exception e){            e.printStackTrace();        }    }    private void addRegionToDB(Region region) throws SQLException {        try{            addWeatherToDb(region.getWeather());            addInhabitantTypeToDb(region.getInhabitantType());            region.setWeather(getLastWeather());            region.setInhabitantType(getLastInhabitantType());            String addString = "insert into " + Const.REGION_TABLE + "("+Const.NAME + ","+Const.AREA + ","+Const.WEATHER_ID +","+Const.ID_TYPE+") values(?,?,?,?)";            PreparedStatement preparedStatement = connection.prepareStatement(addString);            preparedStatement.setString(1,region.getName());            preparedStatement.setDouble(2,region.getArea());            preparedStatement.setInt(3,region.getWeather().getId());            preparedStatement.setInt(4,region.getInhabitantType().getId());            preparedStatement.executeUpdate();            statement.execute(addString);        }catch (Exception e){            e.printStackTrace();        }    }    private void addInhabitantTypeToDb(InhabitantType inhabitantType) throws SQLException {        String insertString = "INSERT into " + Const.INHABITANT_TYPE_TABLE + "(" + Const.NAME + "," + Const.LANGUAGE + ")" +" VALUES (?,?)";        PreparedStatement preparedStatement = connection.prepareStatement(insertString);        preparedStatement.setString(1,inhabitantType.getName());        preparedStatement.setString(2,inhabitantType.getLanguage());        preparedStatement.executeUpdate();        try{           statement.execute(insertString);        }catch (Exception e){        }    }    private ArrayList<InhabitantType> getInhabitantTypesFromDb() throws SQLException {        ArrayList<InhabitantType> inhabitantTypes = new ArrayList<InhabitantType>();        String getResultString = "select * from "+Const.INHABITANT_TYPE_TABLE;        ResultSet resultSet = statement.executeQuery(getResultString);        while(resultSet.next()){            int id = resultSet.getInt(1);            String name = resultSet.getString(2);            String language = resultSet.getString(3);            inhabitantTypes.add(new InhabitantType(id,name,language));        }        return inhabitantTypes;    }    public ArrayList<Region> getRegionsByName(String name) throws SQLException {        return getRegionsByNameFromDB(name);    }    public InhabitantType getInhabitantTypeById(int id) throws SQLException {        return getInhabitantTypeByIdFromDb(id);    }    public Weather getWeatherById(int id) throws SQLException {        return getWeatherByIdFromDb(id);    }    public Region getRegionById(int id) throws SQLException {        return getRegionByIdFromDb(id);    }    public void addWeather(Weather weather) throws SQLException {        addWeatherToDb(weather);    }    public void addRegion(Region region) throws SQLException {        addRegionToDB(region);    }    public ArrayList<InhabitantType> getInhabitantTypes() throws SQLException {        return getInhabitantTypesFromDb();    }    public void insertInhabitantType(InhabitantType inhabitantType) throws SQLException {        addInhabitantTypeToDb(inhabitantType);    }    public void closeConnection() throws SQLException {        connection.close();    }    public void openConnection() throws SQLException, ClassNotFoundException {        DataBaseHandler dataBaseHandler = new DataBaseHandler();        connection = dataBaseHandler.getConnection();        statement = connection.createStatement();    }}