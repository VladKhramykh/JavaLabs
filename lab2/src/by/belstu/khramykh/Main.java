package by.belstu.khramykh;import java.util.Arrays;import static java.lang.Math.*;/** * @author Влад Храмых * @version 1.0 */public class Main {    /**     * @param args     */    public static void main(String[] args) {        //TODO begin here        TextFunction textFunction = new TextFunction();                for (int count = 0; count < 10; count++) {            System.out.println("count = " + (count+1));            if(count == 5)                System.out.println("point of stop");        }        /**         * @value 14         * @see Main         */        String string = "Hello ";        char charSymbol = 'f';        char symbol1 = 'a';        char symbol2 = '\u0061';        char symbol3 = 97;        int intNumber = 2147483647;        short shortNumber = 32767;        byte byteNumber = 127;        long longNUmber = 9223372036854775807L;        double doubleNumber = 9.99;        boolean firstFlag = true;        boolean secondFlag = false;        System.out.println("String + int = " + string + intNumber);        System.out.println("String + char = " + string + charSymbol);        System.out.println("String + double = " + string + doubleNumber);        System.out.println("Double + long = " + doubleNumber + longNUmber);        System.out.println("byte = byte + int невозможно, потому что существует пероятность переполнени вместимости byte");        System.out.println("int + 2147483647 = " + intNumber+intNumber);        System.out.println("static int = " + 912835753);        System.out.println(firstFlag && secondFlag);        System.out.println(firstFlag ^ secondFlag);        System.out.println("'a' + '\u0061' + 97 = " + symbol1 + symbol2 + symbol3);        System.out.println("3.45 % 2.4 = " + 3.45%2.4);        System.out.println("1.0 / 0.0 = " + 1.0/0.0);        System.out.println("0.0 / 0.0 = " + 0.0/0.0);        System.out.println("log(-345) = " + Math.log(-345));        System.out.println("Float.intBitsToFloat(0x7F800000) = " + Float.intBitsToFloat(0x7f800000));        System.out.println("Float.intBitsToFloat(0xff800000) = " + Float.intBitsToFloat(0xff800000));        System.out.println("________________________________________________________________\n");        System.out.println("PI = " + round(PI));        System.out.println("E = " + round(E));        System.out.println("min(E,PI) = " + min(PI,E));        System.out.println("random [0;1] = " + random()*1);        System.out.println();        Boolean boolValue = Boolean.TRUE;        Integer intValue = new Integer("33");        String stringValue = new String("lab_1");        System.out.println("intValue('33') = " + intValue);        intValue = intValue << 15;        System.out.println("intValue << 15 = " + intValue);        System.out.println(~intValue);        long MIN_VALUE_LONG = Long.MIN_VALUE;        long MAX_VALUE_LONG = Long.MAX_VALUE;        double MAX_VALUE_DOUBLE = Double.MAX_VALUE;        double MIN_VALUE_DOUBLE = Double.MIN_VALUE;        int i = 2332;        byte b = 15;        System.out.println("i = " + i + " b = " + b);        b=(byte)i;        System.out.println("После b = (byte)i = " + b);        i = (int)b;        System.out.println("После i = (int)b = " + i);        System.out.println("parseInt(33) = " + Integer.parseInt("33"));        System.out.println("toHexString = " + Integer.toHexString(15));        System.out.println("compare(14,19) = " + Integer.compare(14,19));        System.out.println("toString(777) = " + Integer.toString(777));        System.out.println("bitCount(71) = " + Integer.bitCount(71));        System.out.println();        String sNum2345 = "2345";        Integer iNum2345Constructor = new Integer(sNum2345);        System.out.println("iNum2345(Constructor) = " + iNum2345Constructor);        System.out.println("Integer.valueOf(2345) = " + Integer.valueOf(sNum2345));        System.out.println("Integer.parseInt(2345) = " + Integer.parseInt(sNum2345));        String stringToBytes = "Hello, my friend!!!";        System.out.println("String to Bytes = " + Arrays.toString(stringToBytes.getBytes()));        System.out.println("String to Boolean (valueOf() ) = " + Boolean.valueOf(stringToBytes));        System.out.println("String to Boolean(getBoolean() ) = " + Boolean.getBoolean(stringToBytes));        String string1 = "Hello";        String string2 = "Hello";        System.out.println(string1==string2 ?("(==)string1 == string2"):("(==)string1 != string2"));        System.out.println((string1.equals(string2)) ?("(equals)string1 == string2"):("(equals)string1 != string2"));        int compareTo = string1.compareTo(string2);        if(compareTo < 0)            System.out.println("(compareTo)string1 < string2");        else if(compareTo == 0)            System.out.println("(compareTo)string1 == string2");        else            System.out.println("(compareTo)string1 > string2");        string2 = null;        System.out.println(string1==string2 ?("(string2 = null)(==)string1 == string2"):("(==)string1 != string2"));        System.out.println((string1.equals(string2)) ?("(string2 = null)(equals)string1 == string2"):("(equals)string1 != string2"));        int compareToNull = 15;        //TODO compareTo при одном из значений = null кидает исключение NullPointerException        //compareToNull = string1.compareTo(string2);        if(compareToNull < 0)            System.out.println("(string2 = null)(compareToNull)string1 < string2");        else if(compareToNull == 0)            System.out.println("(string2 = null)(compareToNull)string1 == string2");        else            System.out.println("(string2 = null)(compareToNull)string1 > string2");        String freeString = "Спулае мулае Эчпочмаки Мулае";        String[] words = freeString.split(" ");        System.out.println(freeString.contains("мулае")?("'мулае' есть в этой строке"):("'мулае' нет в этой строке"));        System.out.println("hashCode(freeString) = " + freeString.hashCode());        System.out.println("indexOf('Э') = " + freeString.indexOf('Э'));        System.out.println("length(freeString) = " + freeString.length());        System.out.println("Дo replace: " + freeString);        freeString.replace('и',' ');        System.out.println("После replace: " + freeString);        //TODO при выходе за рамки длины массива будет кинуто исключение ArrayIndexOutOfBoundsException;        char[] c1[] = {{'d'},{'w','w'},{'e','e','e'}};        char[][]c2 = {{'d','d'},{'w','w'}};        char c3[][];        char c4[] = new char[0];        System.out.println("length of char[0] =  "+ c4.length);        // Мы не можем сравнить, т.к. c3 не ссылается ни на что (=null)        //boolean comRez = c2==c3;        //c2 = c3; Это бессмысленно (с3 == null)        int count = 0;        for (char[] ch : c1) {            System.out.print("c1[" + count + "].length = " + ch.length + " : " );            for (char symbol:ch) {                System.out.print(symbol+ " ");            }            count++;            System.out.println();        }        //TODO create WrapperString and using replace and delete        WrapperString wrapperString = new WrapperString("Hello World"){            @Override            public String replace(char oldChar, char newChar){                return super.replace(oldChar, newChar);            }            public void delete (char newChar) {               getStringWrapper().replaceAll(String.valueOf(newChar),"");            }        };        System.out.println("До(replace): " + wrapperString.getStringWrapper());        System.out.println("После(replace): " + wrapperString.replace('l','y'));        System.out.println();        System.out.println();    }}