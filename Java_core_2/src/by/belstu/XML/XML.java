package by.belstu.XML;import by.belstu.ItCompany;import javax.xml.bind.JAXBContext;import javax.xml.bind.JAXBException;import javax.xml.bind.Marshaller;import javax.xml.bind.Unmarshaller;import java.io.FileWriter;import java.io.IOException;import java.io.StringReader;import java.io.StringWriter;import java.nio.charset.Charset;import java.nio.file.Files;import java.nio.file.Paths;public class XML {    public static void writeToXML(String path, Object object) throws JAXBException, IOException {        if (path.length() != 0) {            StringWriter writer = new StringWriter();            JAXBContext context = JAXBContext.newInstance(object.getClass());            Marshaller marshaller = context.createMarshaller();            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);            marshaller.marshal(object, writer);            String result = writer.toString();            FileWriter fileWriter = new FileWriter(path, false);            fileWriter.write(result);            fileWriter.flush();            System.out.println("JAXB в XML выполнена!");        } else            System.out.println("Введите путь при записи!");    }    public static ItCompany readFromXML(String path) throws IOException, JAXBException {        if (path.length() != 0) {            byte[] xmlData = Files.readAllBytes(Paths.get(path));            String data = new String(xmlData, Charset.defaultCharset());            StringReader reader = new StringReader(data);            JAXBContext context = JAXBContext.newInstance(ItCompany.class);            Unmarshaller unmarshaller = context.createUnmarshaller();            System.out.println("JAXB из XML выполнена!");            return (ItCompany) unmarshaller.unmarshal(reader);        }        else            throw new IOException("Введите путь при считывании!");    }}